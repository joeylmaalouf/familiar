import re
import requests

# thanks, AoN!
BASE_URL = r'https://www.archivesofnethys.com/'


# ------------------------------------------------------------------------------
# spells
# ------------------------------------------------------------------------------

spell_requests = [
    {
        'method': 'GET',
        'params': {},
        'path'  : 'Spells.aspx?Class=All'
    }
]

spell_defaults = {
    'casttime'   : None,
    'components' : None,
    'duration'   : None,
    'level'      : None,
    'link'       : None,
    'longdesc'   : None,
    'name'       : None,
    'range'      : None,
    'restriction': None,
    'save'       : None,
    'school'     : None,
    'shortdesc'  : None,
    'spellres'   : None,
    'target'     : None
}

spell_list_regex = r'<b><a href="(?P<link>.*?)">(?:<img.*?>\s?)*(?P<name>.*?)(?:</b><sup>.</sup><b>)*</a></b>: (?P<shortdesc>.*?)<br />'

spell_regexes = [
    r'<h1 class="title">(?:<img.*?>)* ?(?P<name>.*?)</h1>',
    r'<b>School</b> (?P<school>.*?)(?:;|<)',
    r'<b>Level</b> (?P<level>.*?)(?: (?<=\d )\((?P<restriction>.*?)\))?<',
    r'<b>Casting Time</b> (?P<casttime>.*?)<',
    r'<b>Components</b> (?P<components>.*?)<',
    r'<b>Range</b> (?P<range>.*?)<',
    r'<b>(?:Area|Effect|Target)</b> (?P<target>.*?)<',
    r'<b>Duration</b> (?P<duration>.*?)<',
    r'<b>Saving Throw</b> (?P<save>.*?)(?:;|<)',
    r'<b>Spell Resistance</b> (?P<spellres>.*?)<',
    r'>Description</h3>(?P<longdesc>.*?)</?(?:span|h1|h2)'
]

def process_spell(spell):
    """ Processes spell data into a more usable format. """
    # turn a spell level string into a dict of classes and spell levels
    level_regex = re.compile(r'(?P<class0>.+?)(?:/(?P<class1>.+))? (?P<level>\d+)')
    level_dict = {}
    for level_pair in spell['level'].split(', '):
        results = level_regex.search(level_pair)
        if results:
            match = results.groupdict()
            level_dict[match['class0']] = int(match['level'])
            if match['class1']:
                level_dict[match['class1']] = int(match['level'])
    spell['level'] = level_dict
    # turn a components string into a list of components and a dict of any accompanying details
    component_split_regex = re.compile(r', (?![^()]*\))')
    component_regex = re.compile(r'(?P<type>\w+)(?: \((?P<details>.+?)\))?')
    components_list = []
    components_dict = {}
    components = component_split_regex.split(spell['components'])
    for component in components:
        results = component_regex.search(component)
        if results:
            match = results.groupdict()
            components_list.append(match['type'])
            if match['details'] is not None:
                components_dict[match['type']] = match['details']
    spell['components'] = {
        'list': components_list,
        'details': components_dict
    }
    spell['longdesc'] = spell['longdesc'].replace('<i>', '').replace('</i>', '').replace('<br />', ' ')
    return spell

def spell_exceptions(spells):
    for index, spell in enumerate(spells):
        # Controlled Fireball is the only unique spell to share a page with another (Fireball)
        # so we have to update its info for real, instead of using the Fireball data
        if 'Controlled Fireball' in spell['link']:
            updated = spell_defaults.copy()
            updated['link'] = spell['link']
            updated['shortdesc'] = spell['shortdesc']
            page = requests.get('https://pastebin.com/raw/TdcXxwJa').text.replace('\n', '').replace('\r', '')
            for spell_regex in spell_regexes:
                spell_result = re.compile(spell_regex).search(page)
                if spell_result:
                    updated.update(spell_result.groupdict())
            spells[index] = updated
    return spells

SPELL = {
    'defaults'     : spell_defaults,
    'exceptions_fn': spell_exceptions,
    'filename'     : 'spells',
    'list_regex'   : spell_list_regex,
    'power_regexes': spell_regexes,
    'process_fn'   : process_spell,
    'requests'     : spell_requests
}


# ------------------------------------------------------------------------------
# wizard arcane discoveries
# ------------------------------------------------------------------------------

arcane_discovery_requests = [
    {
        'method': 'GET',
        'params': {},
        'path'  : 'WizardArcaneDiscoveries.aspx'
    }
]

arcane_discovery_defaults = {
    'description': None,
    'name'       : None,
    'restriction': None,
    'spectype'   : None
}

arcane_discovery_regex = r'<td>\s*<span.*?><b>(?:<img.*?>\s*)*(?P<name>.*?)\s*(?:\((?P<spectype>Ex|Su|Sp)\))?</b>.*?\): (?P<description>.*?(?P<restriction>You must.*?to (?:select|choose) this (?:arcane )?discovery\.).*?)<hr /></span>\s*</td>'

def process_arcane_discovery(arcane_discovery):
    """ Processes arcane discovery data into a more usable format. """
    # turn the restriction sentence into a dict of restriction types
    restriction = arcane_discovery['restriction']
    if restriction:
        restriction_dict = {
            'bond' : None,
            'feat' : None,
            'level': None
        }
        bond_regex = re.compile(r'must have chosen (?P<bond>.+?) as your arcane bond')
        feat_regex = re.compile(r'must have the (?P<feat>.+?) feat')
        level_regex = re.compile(r'must be at least (?:an? )?(?P<level>\d+?)[a-zA-Z]{2}[ -]level(?: wizard)?')
        for regex in [bond_regex, feat_regex, level_regex]:
            results = regex.search(restriction)
            if results:
                restriction_dict.update(results.groupdict())
        level = restriction_dict['level']
        if level:
            restriction_dict['level'] = int(level)
        arcane_discovery['restriction'] = restriction_dict
    return arcane_discovery

ARCANE_DISCOVERY = {
    'defaults'     : arcane_discovery_defaults,
    'exceptions_fn': None,
    'filename'     : 'arcane_discoveries',
    'list_regex'   : arcane_discovery_regex,
    'power_regexes': None,
    'process_fn'   : process_arcane_discovery,
    'requests'     : arcane_discovery_requests
}


# ------------------------------------------------------------------------------
# witch hexes
# ------------------------------------------------------------------------------

hex_requests = [
    {
        'method': 'GET',
        'params': {},
        'path'  : 'WitchHexes.aspx'
    }
]

hex_defaults = {
    'category'   : None,
    'description': None,
    'name'       : None,
    'spectype'   : None
}

hex_regex = r'<td>\s*<span id="(?P<category>.*?)".*?><i>(?:<img.*?>\s*)*(?P<name>.*?)\s*(?:\((?P<spectype>Ex|Su|Sp)\))?</i>.*?\): (?P<description>.*?)<hr /></span>\s*</td>'

def process_hex(hex):
    """ Processes hex data into a more usable format. """
    # turn a hex section id into a hex category
    category = hex['category'].split('_')[2]
    hex['category'] = {
        'DataListTypes': 'common',
        'DataList1'    : 'major',
        'DataList2'    : 'grand'
    }[category]
    return hex

HEX = {
    'defaults'     : hex_defaults,
    'exceptions_fn': None,
    'filename'     : 'hexes',
    'list_regex'   : hex_regex,
    'power_regexes': None,
    'process_fn'   : process_hex,
    'requests'     : hex_requests
}


# ------------------------------------------------------------------------------
# cleric domains
# ------------------------------------------------------------------------------

domain_requests = [
    {
        'method': 'GET',
        'params': {},
        'path'  : 'ClericDomains.aspx'
    }
]

domain_defaults = {
    'deities'   : None,
    'link'      : None,
    'name'      : None,
    'powers'    : None,
    'spells'    : None,
    'subdomains': None
}

subdomain_defaults = {
    'deities'     : None,
    'name'        : None,
    'powers'      : None,
    'spells'      : None,
    'superdomains': None
}

domain_regex = r'<tr.*?href="(?P<link>.*?)">(?:<img.*?>\s?)?(?P<name>.*?)</.*?<td>(?P<subdomains>.*?)</td><td>(?P<deities>.*?)</td>\s*</tr>'

domain_regexes = [
    r'Granted Powers</b>: (?P<powers>.*?)(?:<br />)*<b>Domain Spells',
    r'Domain Spells</b>: (?P<spells>.*?)\.',
    r'<br />(?P<sdtext><h2.*?/h2>.*?)(?:<h1|</span>)'
]

def process_domain(domain):
    """ Processes domain data into a more usable format. """
    domain = _process_domain(domain, False)
    # turn a subdomain string into a list of subdomains
    subdomains = domain['subdomains']
    subdomains_regex = re.compile(r'.*?>(?P<list>.*?)<.*?')
    results = subdomains_regex.search(subdomains)
    if results:
        subdomains_dict = {}
        subdomain_list = results.groupdict()['list'].split(', ')
        for subdomain_name in subdomain_list:
            subdomain_regex = re.compile(r'> ?' + subdomain_name + r' Subdomain</.*?<b>Associated Domain\(s\)</b>: (?P<superdomains>.*?)(?:<br />)*<b>Associated Deities</b>: (?P<deities>.*?)(?:<br />)*<b>Replacement Powers?</b>: (?P<powers>.*?)(?:<br />)*<b>Replacement Domain Spells</b>: (?P<spells>.*?)\..*?(?:<(?:h1|h2)|</span>|<br />)')
            subdomain = subdomain_defaults.copy()
            subdomain['name'] = subdomain_name
            match = subdomain_regex.search(domain['sdtext'])
            if match:
                subdomain.update(match.groupdict())
                subdomain['superdomains'] = subdomain['superdomains'].split(', ')
                subdomain = _process_domain(subdomain, True)
            subdomains_dict[subdomain_name] = subdomain
        domain['subdomains'] = subdomains_dict
    del(domain['sdtext'])
    return domain

def _process_domain(domain, is_subdomain = False):
    """ process_domain helper function. """
    # turn a deities string into a list of deities
    deities = domain['deities']
    deities_regex = re.compile(r'<a.*?>(?P<deity>.*?)</a>')
    domain['deities'] = deities_regex.findall(deities)
    # turn a powers string into a list of powers
    powers = domain['powers'].replace('<i>', '').replace('</i>', '').split('<br /><br />')
    # if it's a normal domain, ignore the flavor text
    # if it's a subdomain, keep the replacement notice and attach it to the first power
    # (which should be the only one, but we have support for more in the list just in case)
    if is_subdomain:
        domain['powers'] = [powers[0] + '<br />' + powers[1]] + powers[2:]
    else:
        domain['powers'] = powers[1:]
    # turn a spells string into a list of spells, with level and name split on the emdash
    spells = domain['spells'].replace('<i>', '').replace('</i>', '').split(', ')
    spells_dict = {}
    for spell in spells:
        spell_data = spell.replace(u'\u2014', '-').split('-', 1)
        spells_dict[spell_data[0].strip()] = spell_data[1].strip()
    domain['spells'] = spells_dict
    return domain

DOMAIN = {
    'defaults'     : domain_defaults,
    'exceptions_fn': None,
    'filename'     : 'domains',
    'list_regex'   : domain_regex,
    'power_regexes': domain_regexes,
    'process_fn'   : process_domain,
    'requests'     : domain_requests
}


# ------------------------------------------------------------------------------
# magus arcana
# ------------------------------------------------------------------------------

arcana_requests = [
    {
        'method': 'GET',
        'params': {},
        'path'  : 'MagusArcana.aspx'
    }
]

arcana_defaults = {
    'description': None,
    'name'       : None,
    'restriction': None,
    'spectype'   : None
}

arcana_regex = r'<td>\s*<span.*?><i>(?:<img.*?>\s*)*(?P<name>.*?)\s*(?:\((?P<spectype>Ex|Su|Sp)\))?</i>.*?\): (?P<description>.*?)<hr /></span>\s*</td>'

def process_arcana(arcana):
    """ Processes arcana data into a more usable format. """
    # parse restriction from description
    restriction_regex = re.compile(r'The magus (?P<restriction>must .*?) (?:before|to) (?:he )?select(?:s|ing)?(?: this (?:magus )?arcana\.)?')
    results = restriction_regex.search(arcana['description'])
    if results:
        restriction = results.groupdict()['restriction']
        if restriction:
            restriction_dict = {
                'arcana' : None,
                'class'  : None,
                'feature': None,
                'level'  : None
            }
            arcana_regex = re.compile(r'have the (?P<arcana>.*?) (?:magus )?arcana')
            class_regex = re.compile(r'(?:have|possess) levels in (?P<class>.*)')
            feature_regex = re.compile(r'have (?P<feature>ranged spellstrike)')
            level_regex = re.compile(r'be at least (?P<level>\d+?)[a-zA-Z]{2}[- ]level')
            for regex in [arcana_regex, class_regex, feature_regex, level_regex]:
                results = regex.search(restriction)
                if results:
                    restriction_dict.update(results.groupdict())
            level = restriction_dict['level']
            if level:
                restriction_dict['level'] = int(level)
            arcana['restriction'] = restriction_dict
    return arcana

ARCANA = {
    'defaults'     : arcana_defaults,
    'exceptions_fn': None,
    'filename'     : 'arcana',
    'list_regex'   : arcana_regex,
    'power_regexes': None,
    'process_fn'   : process_arcana,
    'requests'     : arcana_requests
}


# ------------------------------------------------------------------------------
# arcanist exploits
# ------------------------------------------------------------------------------

exploit_base_state = ''
exploit_requests = [
    {
        'method': 'POST',
        'params': {'__VIEWSTATE': exploit_base_state + 'GQCCw8PZDwrAAYBABAWAWYWARYCHg5QYXJhbWV0ZXJWYWx1ZWQWAQIDZAINDw9kPCsABgEAEBYBZhYBFgIfA2QWAQIDZAIPDw9kPCsABgEAEBYBZhYBFgIfA2QWAQIDZBgBBRxjdGwwMCRNYWluQ29udGVudCRNdWx0aVZpZXcxDw9kZmS5EUVgNu34b/G6Q8n3FQN+JKAgsg=='},
        'path'  : 'ArcanistExploits.aspx'
    },
    {
        'method': 'POST',
        'params': {'__VIEWSTATE': exploit_base_state + 'GQCCw8PZDwrAAYBABAWAWYWARYCHg5QYXJhbWV0ZXJWYWx1ZWQWAQIDZAINDw9kPCsABgEAEBYBZhYBFgIfA2QWAQIDZAIPDw9kPCsABgEAEBYBZhYBFgIfA2QWAQIDZBgBBRxjdGwwMCRNYWluQ29udGVudCRNdWx0aVZpZXcxDw9kAgFki0EPQkCFTEdY6IhXOMOT9rgng2Y='},
        'path'  : 'ArcanistExploits.aspx'
    },
    {
        'method': 'POST',
        'params': {'__VIEWSTATE': exploit_base_state + ''},
        'path'  : 'ArcanistExploits.aspx'
    }
]

exploit_defaults = {
    'category'   : None,
    'description': None,
    'name'       : None,
    'spectype'   : None
}

exploit_regex = r'<td>\s*<span id="(?P<category>.*?)".*?><i>(?:<img.*?>\s*)*(?P<name>.*?)\s*(?:\((?P<spectype>Ex|Su|Sp)\))?</i>.*?\): (?P<description>.*?)<hr /></span>\s*</td>'

def process_exploit(exploit):
    """ Processes exploit data into a more usable format. """
    # turn an exploit section id into an exploit category
    category = exploit['category'].split('_')[2]
    exploit['category'] = {
        'DataListTypes': 'normal',
        'DataList1'    : 'greater',
        'DataList2'    : 'outer rift'
    }[category]
    return exploit

EXPLOIT = {
    'defaults'     : exploit_defaults,
    'exceptions_fn': None,
    'filename'     : 'exploits',
    'list_regex'   : exploit_regex,
    'power_regexes': None,
    'process_fn'   : process_exploit,
    'requests'     : exploit_requests
}
